import type { PullsListResponse } from "../git";

interface TemplateVariables {
    emoji: string;
    prCount: number;
    prList: string;
    prListPlain: string;
    totalSelected: number;
    commitCount: number;
    commitSkipped: number;
    targetBranch: string;
    sourceBranch: string;
    date: string;
    dateTime: string;
    timestamp: string;
    owner: string;
    repo: string;
}

const substituteVariables = (
    template: string,
    variables: TemplateVariables,
): string => {
    return template.replace(/\{\{(\w+)\}\}/g, (match, variableName) => {
        const value = variables[variableName as keyof TemplateVariables];
        return value !== undefined ? String(value) : match;
    });
};

const getDefaultTemplate = (emoji: string): string => {
    return `## ${emoji} Cherri Summary

This PR contains cherry-picked commits from the following PRs:

{{prList}}

### Details
- **Total PRs selected**: {{totalSelected}}
- **PRs with picked commits**: {{prCount}}
- **Commits cherry-picked**: {{commitCount}}
- **Commits skipped**: {{commitSkipped}}

### Generated by Cherri
This PR was automatically created by the [Cherri](https://github.com/0xr3ngar/cherri) tool for cherry-picking PRs marked with ${emoji}.`;
};

export const generatePrBody = (
    emoji: string,
    pickedPRs: PullsListResponse["data"],
    totalSelectedPRs: number,
    successCount: number,
    skipCount: number,
    customTemplate?: string,
    targetBranch?: string,
    sourceBranch?: string,
    owner?: string,
    repo?: string,
): string => {
    const prList = pickedPRs
        .map((pr) => `- #${pr.number}: ${pr.title} (@${pr.user?.login})`)
        .join("\n");

    const prListPlain = pickedPRs.map((pr) => `#${pr.number}`).join(", ");

    const now = new Date();
    const date = now.toISOString().split("T")[0];
    const dateTime = now.toISOString();
    const timestamp = String(now.getTime());

    const variables: TemplateVariables = {
        emoji,
        prCount: pickedPRs.length,
        prList,
        prListPlain,
        totalSelected: totalSelectedPRs,
        commitCount: successCount,
        commitSkipped: skipCount,
        targetBranch: targetBranch ?? "unknown",
        sourceBranch: sourceBranch ?? "unknown",
        date,
        dateTime,
        timestamp,
        owner: owner ?? "unknown",
        repo: repo ?? "unknown",
    };

    const template = customTemplate || getDefaultTemplate(emoji);
    return substituteVariables(template, variables);
};
